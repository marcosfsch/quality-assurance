#input {
#    stdin{
#      codec => "json"
#    }
#}

input {
  # Read JSON from a file
  file {
    #type => "tasks"
    #type => "doc"
    #path => ["/ps_data/tasks_ps-4-0.qalab.geant.net.json"]
    # type => "json"
    # path => "/home/mj82/src/pscheduler-crawler/bin/testdata2/tasks_ps-4-0.qalab.geant.net.json"
    # path => "/home/mj82/src/pscheduler-crawler/bin/testdata2/results_ps-4-0.qalab.geant.net.json"
    type => "runs"
    path => ["/ps_data/live/runs_*.jsonl"]

    #sincedb_path => "/home/mj82/logstash/sincedb"       # to not keep track of processed lines # for testing  "/home/lensman/.sincedb_test"
    #sincedb_path => "/dev/null"       # to not keep track of processed lines 
    sincedb_path => "/ps_data/live/sincedb"
    start_position => "beginning"     # to always redo all lines in the file # for testing
    #start_position => "end"     # to always redo all lines in the file # for testing
    #codec => "json"                   # parses JSON into logstash fields
    codec => "plain"
  }
}


# out = event.get(diag['stdout']).to_s
# event.set(diag['stdout'], out)
# puts 'stdout ' + diag['stdout']
# if diag['stdout'] == ""
#	event.remove(diag['stdout'])
# end

# if out.is_a?(String)
#	event.set(diag['stdout'], {'stdout' => out.to_s })
# end

#output {
#	stdout { } 
#}

#filter {
#    json {
#        source => "message"
#    }
#}

# Get data from Rabbit. If the rabbit msg is JSON, it'll parse it into logstash fields.
#    rabbitmq{
#        host => 'localhost'
#        subscription_retry_interval_seconds => 5
#        queue => 'logstash_flow_input'
#        key =>   'logstash_flow_input'
#        exchange => 'amq.direct'
#        durable => true
#        user => 'guest'
#        password => 'guest'
#    }


#output {
#  stdout { 
#    codec => rubydebug
#    id => 'stdout_id'
#  } 
#}
