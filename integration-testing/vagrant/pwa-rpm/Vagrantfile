#
# Vagrantfile for perfSONAR Testbed Hosts
#

perfsonar_repo = "http://software.internet2.edu/rpms/el7/x86_64/main/RPMS/perfSONAR-repo-0.9-1.noarch.rpm"

# -*- mode: ruby -*-
# vi: set ft=ruby :

# Install vagrant-disksize to allow resizing the vagrant box disk.
unless Vagrant.has_plugin?("vagrant-disksize")
    raise  Vagrant::Errors::VagrantError.new, "vagrant-disksize plugin is missing. Please install it using 'vagrant plugin install vagrant-disksize' and rerun 'vagrant up'"
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"
  config.disksize.size = '20GB'
  config.vm.hostname= "pwa-rpm1"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080


  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network", bridge: "en0: Wi-Fi (Wireless)"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
     vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "4096"
     vb.cpus = 4
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
     #apt-get install -y apache2
 
        YUMMY="yum -y"
  config.vm.provision "shell", inline: <<-SHELL
        set -e

        if [ ! -e "/etc/redhat-release" ]
        then
          echo "Only CentOS is supported at this time." 1>&2
          exit 1
        fi
	 #Disable selinux
        sed -i s/SELINUX=enforcing/SELINUX=permissive/g /etc/selinux/config

    #reload VM since selinux requires reboot. Requires `vagrant plugin install vagrant-reload
    # TODO: TEMPORARY
    # Blackhole ps1.es.net for testing purposes
    ip route add blackhole 198.128.151.17/32
    ip route add blackhole 2001:400:210:151::11/64

    yum update -y
	yum -y install epel-release
	# tools for convenience
	yum -y install vim bind-tools 
    # install perfsonar repo(s) and PWA
	yum install -y #{perfsonar_repo}
	yum install -y perfSONAR-repo-nightly-minor
	yum install -y perfsonar-psconfig-web-admin-ui perfsonar-psconfig-web-admin-publisher

    # move convenience
	systemctl enable httpd
    systemctl start httpd


  SHELL
  config.vm.provision :reload
end

# repos
# perfSONAR-repo.noarch : perfSONAR Repository file and package configuration
# perfSONAR-repo-extras.noarch : perfSONAR extras repository
# perfSONAR-repo-nightly-minor.noarch : perfSONAR nightly (minor version) repository
# perfSONAR-repo-nightly-patch.noarch : perfSONAR nightly (patch version) repository
# perfSONAR-repo-staging.noarch : perfSONAR staging repository
